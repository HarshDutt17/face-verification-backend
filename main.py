from fastapi import FastAPI, Depends, HTTPException
from models import Base, User
from schemas import UserSchema
from database import engine,SessionLocal
from sqlalchemy.orm import Session
import json
from script import verifyFace

Base.metadata.create_all(bind=engine)

app = FastAPI()


def get_db():
    try:
        db = SessionLocal()
        yield db
    finally:
        db.close()

@app.get("/")
async def home():
    return {"message": "Hello, World!"}

@app.post("/updateuser")
async def add_or_create_user(request:UserSchema, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.username == request.username).first()
    if not user:
        user = User(username=request.username, faces=json.dumps(request.faces))
        db.add(user)
        
    else:
        faces = json.loads(user.faces) or []
        faces.append(request.faces[0])
        user.faces = json.dumps(faces)
    db.commit()
    db.refresh(user)
    return user

@app.post("/verifyUser")
async def verify_user(request:UserSchema, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.username == request.username).first()
    if not user:
       raise HTTPException(status_code=404, detail="User not found!")
    else:
        img1 = "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"

        faces = json.loads(user.faces) or []
        # return verifyFace(faces, request.faces[0])
        return verifyFace([img1], img1)

@app.get("/user/{user_name}")
async def get_users(user_name,db: Session = Depends(get_db)):
    users = db.query(User).filter(User.username == user_name).first()
    return users